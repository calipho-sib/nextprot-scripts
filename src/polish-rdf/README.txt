(1)
Generate rdfhelp-YYYYmmdd-hhMM.json file

# Can be generated with:
ssh npteam@kant
cd /work/ttldata/operations
nohup ../quick-gen.sh "rdfhelp" > quick-gen-$(date "+%Y%m%d-%H%M").log 2>&1 &
See also: https://swissprot.sib.swiss/wiki/display/cal/QuickGen+Documentation

# Retrieval after generatiion: 
ssh npteam@kant
ls -ltr /work/ttldata/operations/*.json

(2)
Generate schema.ttl locally or from kant
wget -O schema.ttl http://localhost:8080/nextprot-api-web/rdf/schema.ttl
OR
wget -O schema.ttl http://kant:8080/nextprot-api-web/rdf/schema.ttl

(3)
python3 describe-properties.py

Input
- schema.ttl (a version of the schema.ttl file)
- rdfhelp-20220715-0258.json (a version of the rdf help json file generated by the API
Output
- prints triples not found in schema.ttl but found in rdfhelp
- prints also comments (lines starting with #) to explain actions taken

This was used to generate the file additional-properties-def.ttl.vm now included in the API when we generate schema.ttl
Typical usage:
python3 describe-properties.py | grep -v "#" > additional-properties-def.ttl.vm

The output files was edited manually for some entities but was mostly usable as generated.
This step doesn't need to be run again.

(4)
python3 retrieve-schema-labels-comments.py

Input
- schema.ttl: an up to date version of schema.ttl (now including additional-properties-def.ttl.vm)
- goodoc.in: a tsv download of the TAB "nextprot-rdf-classes" in google sheet:
https://docs.google.com/spreadsheets/d/1GAwW1dg_EAw62AujyivG_j_sz4uNaGZlyuSgitbTE0k/edit#gid=721052733

Output
- (a) stdout: content to be imported to TAB "nextprot-rdf-classes-V2"
- (b) pred.tsv: content to be impoted to TAB "nextprot-rdf-predicates"
- (c) individuals.tsv: content to be imported to TAB "nextprot-named-individuals"

Note: 
The script should be refactured for future use.
The output (a) should not depend on goodoc.in anymore but only from schema.ttl and output a file rather characters on stdout
The output (a), (b) and (c) should be adapted to match existing columns in the google-doc

(5)
python3 reimport-nextprot-rdf-entities-descriptions.py

Input:
- schema.ttl : the schema as produced by the API
- "/Users/pmichel/Downloads/nextprot-rdf-classes - nextprot-rdf-classes-V2.tsv" : an tsv export of google sheet TAB "...classes V2"
- "/Users/pmichel/Downloads/nextprot-rdf-classes - nextprot-rdf-predicates.tsv" : an tsv export of google sheet TAB "...rdf-predicates"
- "/Users/pmichel/Downloads/nextprot-rdf-classes - nextprot-rdf-named-individuals.tsv" : an tsv export of google sheet TAB "...named-individuals"

Output
- schema-new.ttl : the schema as produced by the API including label and comment change suggesions edited in the google doc

After checks, the schema-new.ttl can be used to replace the original schema.ttl to:
- be loaded to virtuoso SPARQL endpoint together with other file
- be used to manually modify labels, comments in the source files / db / repositories / scripts
- be used as the basis for building a html version of it with pyLONE

(6)
python3 pylode/pyLODE-2.13.2/pylode/cli.py -i ./schema.ttl  > schema.html

Input
- schema.ttl : a ready-to-publish version of schema.ttl ( see step (5) for example )

Output
- schema.html: a human-readable html version of the neXtProt ontology 

Note:
pylone 2.13.2 is buggy, and later versions 3.x are not fully implemented:
- hash anchors are based on entity labels and incorrect in some cases (links in Range(s) and alesewhere)
- Range(s) defined with a owl:unionOf multiple classes don't work properly




 

 



